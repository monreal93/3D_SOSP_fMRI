Functions:
    minTimeGradient  - The main function, all sub functions used in the 
                        implementation of the time-optimal gradient designs
                        are in mtg_functions.c
    vdSpiralDesign.m - A utility function to design spiral 
                        trajectories with variable densities.
 
Examples:
    example_trapezoid.m - designs a trapezoid gradient that corresponds to a line in k-space.
    example_spiral.m - an example of a dual density spiral design.
    example_circle.m - design of a circular trajectory
    example_rosette.m - examples of a time-optimal rosette trajectory design.
	example_cone.m	- examples of a time-optimal cone trajectory
 
To run, first compile using from MATLAB command using:

	mex minTimeGradient.c

The minTimeGradient function has the following inputs :

 C        -  The curve in k-space given in any parameterization [1/cm].
             Accepts 2D and 3D trajectories as 2D or 3D arrays
             C = [x, y] or C = [x, y, z]. If the curve is entered as a 2D 
	     trajectory, z will be set to 0.
 RIV/RV   -  0 for rotationally invariant solution (magnitude constraints),
             1 for rotationally variant solution (individual gradient/slew 
             constraints for individual directions in k-space).
             Default is 0 for the rotationally invariant solution.
 g0       -  Initial gradient amplitude.
 gfin     -  Gradient value at the end of the trajectory.
             If given value is not possible
             the result would be the largest possible amplitude.
             (Leave empty if you do not care to get maximum gradient).
 gmax     -  Maximum gradient [G/cm] (4 default)
 smax     -  Maximum slew [G/cm/ms] (15 default)
 T        -  Sampling time intervale [ms] (4e-3 default)
 ds       -  step size for ODE integration, enter -1 for default value

The return values are:

 C        -  The curve reparameterized and sampled at T[ms].
             Returned as Nx3 array.
 time     -  total time to get to the end
 g        -  gradient waveform [G/cm] Nx3 array.
 s        -  slew rate [G/cm/ms] , Nx3 array.
 k        -  exact k-space corresponding to the gradient g
             (This function reparametrizes C, then takes a derivative.
             Numerical errors in the derivative can lead to
             deviation.
phi       -  Geometry constrains on the amplitude vs. arc-length
sta       -  Solution for the forward ODE
stb       -  Solution for the backward ODE


Depending on what type of solution is chosen, it will run either the function 
minTimeGradientRIV or minTimeGradientRV defined in mtg_functions.c
Both of these are also implemented in MATLAB, in the files 
minTimeGradientRIV.m and minTimeGradientRV.m included.

Load an Nx2 or Nx3 matrix as the curve, C, into the workspace.
An example trajectory:
	C = exp(i*2*pi*linspace(0,1,512)')*10;
	C = [real(C) imag(C) 0*C];

Gradient and slew constraints can be defined, or default values can also be used. 
The initial and final gradient values can also be selected, 
or left empty for defaults. 

Running 
	[C, time, g, s, k, phi, sta, stb] =  minTimeGradient(C);

will use all the default conditions. It will find the rotationally 
invariant solution to the time optimal gradient design, 
with Gmax = 4 G/cm and Smax = 15 G/cm/ms.

Running
    [C, time, g, s, k, phi, sta, stb] =  minTimeGradient(C, 1, 0, 0, 4, 15, 4e-3, 0.01);

will find the rotationally variant solution to the time optimal gradient design. 
The initial and final gradient amplitudes are set to 0, using a time interval
of 4e-3 and the a step size of 0.01 for the integration.

Running
    [C, time, g, s, k, phi, sta, stb] =  minTimeGradient(C, 1);

will return the rotationally variant solution using all the default 
values for Gmax, Smax, g0, gfin, T, and ds.

Running
        [C, time, g, s, k, phi, sta, stb] =  minTimeGradient(C, 1, 0, -1, 4, 15, 4e-3, -1);

will return the rotationally variant solution using default values for gfin and ds.

All the subfunctions called are defined in mtg_functions. 
All interpolations are done using cubic spline interpolations.
These are defined in files spline.c and cmath.h from 
the CMATH numerical methods package Copyright (c) 1989 Design Software. (see http://www.mech.uq.edu.au/staff/jacobs/nm_lib/index.html)